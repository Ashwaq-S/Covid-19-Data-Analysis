create database Company

use Company

select * from fact
select * from product
select * from location

exec sp_help fact
exec sp_help product
exec sp_help locations

exec sp_rename locations,location

--1. Display the number of states present in the LocationTable. 

select count(distinct state) as number_of_states from location


--2. How many products are of regular type?

select count(*) RegularType from product where type='regular'


--3. How much spending has been done on marketing of product ID 1?

select SUM(marketing) Spend_on_marketing from fact where PRODUCTID=1


--4. What is the minimum sales of a product?

SELECT MIN(SALES) min_sales FROM FACT



--5. Display the max Cost of Good Sold (COGS).

SELECT MAX(COGS) Max_Cogs FROM FACT


--6. Display the details of the product where product type is coffee.

select * from product where Product_type='coffee'



--7. Display the details where total expenses are greater than 40. 

select * from fact where total_expenses>40


--8. What is the average sales in area code 719?

select avg(sales) avg_sales from fact where area_code=719


--9. Find out the total profit generated by Colorado state.

select sum(F.profit) total_profit from fact f join location L
   on f.area_code=l.area_code
   where state='colorado'


--10. Display the average inventory for each product ID. 

select productid,avg(inventory) AVg_Inventory 
       from fact 
	   group by productid
	   order by productid 


--11. Display state in a sequential order in a Location Table. 

select * from location order by state


--12. Display the average budget of the Product where the average budget
---margin should be greater than 100.

select productid ,avg(budget_margin) average_budget from fact group by ProductId 
   having avg(budget_margin)>100
   order by productid


--13. What is the total sales done on date 2010-01-01?

select sum(sales) total_sales from fact where date= '2010-01-01'


--14. Display the average total expense of each product ID on an individual date. 

select date,productid,avg(total_expenses) avg_total_expenses from fact 
       group by date,productid
	   order by date,productid


--15. Display the table with the following attributes such as 
--date, productID, product_type, product, sales, profit, state, area_code. 

select F.date, F.productID, P.product_type, P.product, F.sales, F.profit, L.state,L.area_code
       FROM PRODUCT P JOIN FACT F
	   ON P.PRODUCTID=F.PRODUCTID
	   JOIN LOCATION L 
	   ON L.AREA_CODE=F.AREA_CODE


--16. Display the rank without any gap to show the sales wise rank. 

SELECT*,DENSE_RANK()OVER( ORDER BY SALES DESC) SALESWISE_RANK FROM FACT


--17. Find the state wise profit and sales.

SELECT L.STATE,SUM(F.PROFIT) TOTAL_PROFIT,SUM(F.SALES) TOTAL_SALES FROM FACT F
	   JOIN LOCATION L 
	   ON L.AREA_CODE=F.AREA_CODE
	   GROUP BY STATE
	   ORDER BY STATE


--18. Find the state wise profit and sales along with the productname. 

SELECT L.STATE,P.PRODUCT,SUM(F.PROFIT) TOTAL_PROFIT,SUM(F.SALES) TOTAL_SALES FROM LOCATION L
	   JOIN FACT F 
	   ON L.AREA_CODE=F.AREA_CODE
	   JOIN PRODUCT P
	   ON P.PRODUCTID=F.PRODUCTID
	   GROUP BY STATE,PRODUCT
	   ORDER BY STATE


--19. If there is an increase in sales of 5%, calculate the increasedsales.

SELECT SUM(SALES)*1.05 increasedsales  FROM FACT


--20. Find the maximum profit along with the product ID and producttype.

select P.PRODUCTID,P.PRODUCT_TYPE,MAX(F.PROFIT) TOTAL_PROFIT
       FROM PRODUCT P JOIN FACT F
	   ON P.PRODUCTID=F.PRODUCTID
	   GROUP BY P.PRODUCTID,P.PRODUCT_TYPE


--21. Create a stored procedure to fetch the result according to the product typefrom Product Table.

drop proc fetchProducttype

CREATE PROC fetchProducttype 
@PRODUCTTYPE nvarchar(max)
as
begin
select* from product
where product_type=@PRODUCTTYPE
end

exec fetchProducttype coffee


--22. Write a query by creating a condition in which 
--if the total expenses is lessthan60 then it is a profit or else loss.

select *,
case
    when total_expenses<60 then'profit'
	else'loss'
	end Result
from fact


--23. Give the total weekly sales value with the date and product IDdetails.
--Useroll-up to pull the data in hierarchical order.

SELECT 
    COALESCE(convert(varchar,datepart(week,date)),'Total')  week_number,
    coalesce(convert(varchar,productid),'Total') productid,
    SUM(sales) AS total_weekly_sales
    FROM fact
	GROUP BY productid,datepart(week,date)
    WITH ROLLUP
 

--24. Apply union and intersection operator on the tables which consist of
--attribute area code.

select Area_Code from fact
union
select Area_Code from location

select Area_Code from fact
intersect
select Area_Code from location


--25. Create a user-defined function for the product table to fetch a particular
--product type based upon the user’s preference.

create function fetchResults(@input nvarchar(100))
returns table
AS 
 return SELECT * FROM PRODUCT 
		WHERE PRODUCT_TYPE=@INPUT

select * from dbo.fetchresults('coffee')


--26. Change the product type from coffee to tea where product IDis 1 andundoit.

begin transaction
update product
set product_type='Tea' where  productid=1
SELECT * FROM PRODUCT

ROLLBACK


--27. Display the date, product ID and sales where total expenses are
--between 100 to 200.

SELECT DATE,PRODUCTID,SALES FROM FACT 
       WHERE Total_expenses  between 100 and 200


--28. Delete the records in the Product Table for regular type.

begin transaction

delete product where type='regular'
select * from product

rollback


--29. Display the ASCII value of the fifth character from the columnProduct.

select PRODUCT,ASCII(SUBSTRING(PRODUCT,5,1)) Ascii_value
FROM PRODUCT


